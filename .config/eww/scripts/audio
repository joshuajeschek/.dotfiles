#!/bin/bash
SINK_BLACKLIST=(
  'alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_3__sink'
  'alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_4__sink'
  'alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_5__sink'
  )
SINK_FILTER='false'
for sink in "${SINK_BLACKLIST[@]}"; do SINK_FILTER="$SINK_FILTER or .name == \"$sink\""; done
refresh() {
  SINK_BLACKLIST=(
    'alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_3__sink'
    'alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_4__sink'
    'alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_5__sink'
    )
  default_sink="\"$(pactl get-default-sink)\""
  export sinks=`pactl -f json list sinks | jq "[.[]
    | { index, name, description, mute, state,
        volume: .volume[.volume | keys_unsorted[0]].value_percent | sub(\"%\"; \"\") | tonumber,
        default: (if .name==$default_sink then true else false end) }
    | del(. | select($SINK_FILTER))] | del(..|nulls)"`
  export sources=`pactl -f json list sink-inputs | jq '[.[]
    | { index, sink, mute, corked,
        volume: .volume[.volume | keys_unsorted[0]].value_percent | sub("%"; "") | tonumber,
        name: .properties."media.name",
        application: .properties."application.name"}]'`
  eww update sources="$(sed 's/"/\"/g' <<< $sources | tr -s '\n' ' ')"
  eww update sinks="$(sed 's/"/\"/g' <<< $sinks | tr -s '\n' ' ')"
  # update other instances (only matters with default sink)
  if [[ -z $1 ]]; then
    echo $($HOME/.config/eww/scripts/volume get) >> /tmp/eww/volume
  fi
}
update() {
  refresh
  sinks_count=$(jq 'length' <<< $sinks)
  sinks_eww=''
  for ((i=0;i<sinks_count;i++)); do
    sinks_eww="$sinks_eww(sink :data {sinks[$i]})"
  done
  sinks_eww="(box :orientation 'v' $sinks_eww)"
  eww update sinks_eww="$sinks_eww"
  sources_count=$(jq 'length' <<< $sources)
  sources_eww=''
  for ((i=0;i<sinks_count;i++)); do
    sources_eww="$sources_eww(source :data {sources[$i]})"
  done
  sources_eww="(box :orientation 'v' $sources_eww)"
  echo $sources_eww
  eww update sources_eww="$sources_eww"
}
rotate() {
  update &
  current=`eww get audio_content`
  if [ -z "$current" ]; then
    eww update audio_content="sinks"
    eww open audio
  elif [[ $current == 'sinks' ]]; then
    eww update audio_content="sources"
    eww open audio
  else
    eww update audio_content=""
    eww close audio
  fi
}

case "$1" in
  refresh) refresh $2;;
  update) update;;
  rotate) rotate;;
esac
